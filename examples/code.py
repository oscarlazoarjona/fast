def hamiltonian(detuning_knob):
    r"""A fast calculation of the hamiltonian."""
    H = np.zeros((24, 24), complex)

    # We calculate the below-diagonal elements.
    H[8, 0] = (50+0j)*(0j)
    H[8, 1] = (50+0j)*((-2.06909990386e-29+0j))
    H[8, 2] = (50+0j)*(0j)
    H[9, 0] = (50+0j)*((2.31332401863e-29+0j))
    H[9, 1] = (50+0j)*(0j)
    H[9, 3] = (50+0j)*(0j)
    H[9, 4] = (50+0j)*((-8.01358946927e-30+0j))
    H[9, 5] = (50+0j)*(0j)
    H[10, 0] = (50+0j)*(0j)
    H[10, 2] = (50+0j)*(0j)
    H[10, 4] = (50+0j)*(0j)
    H[10, 5] = (50+0j)*((-9.25329607452e-30+0j))
    H[10, 6] = (50+0j)*(0j)
    H[11, 1] = (50+0j)*(0j)
    H[11, 2] = (50+0j)*((-2.31332401863e-29+0j))
    H[11, 5] = (50+0j)*(0j)
    H[11, 6] = (50+0j)*((-8.01358946927e-30+0j))
    H[11, 7] = (50+0j)*(0j)
    H[12, 0] = (50+0j)*(0j)
    H[12, 3] = (50+0j)*((2.06909990386e-29+0j))
    H[12, 4] = (50+0j)*(0j)
    H[13, 0] = (50+0j)*((1.79189307971e-29+0j))
    H[13, 1] = (50+0j)*(0j)
    H[13, 3] = (50+0j)*(0j)
    H[13, 4] = (50+0j)*((1.03454995193e-29+0j))
    H[13, 5] = (50+0j)*(0j)
    H[14, 0] = (50+0j)*(0j)
    H[14, 1] = (50+0j)*((2.06909990386e-29+0j))
    H[14, 2] = (50+0j)*(0j)
    H[14, 4] = (50+0j)*(0j)
    H[14, 6] = (50+0j)*(0j)
    H[15, 1] = (50+0j)*(0j)
    H[15, 2] = (50+0j)*((1.79189307971e-29+0j))
    H[15, 5] = (50+0j)*(0j)
    H[15, 6] = (50+0j)*((-1.03454995193e-29+0j))
    H[15, 7] = (50+0j)*(0j)
    H[16, 2] = (50+0j)*(0j)
    H[16, 6] = (50+0j)*(0j)
    H[16, 7] = (50+0j)*((-2.06909990386e-29+0j))
    H[17, 3] = (50+0j)*(0j)
    H[18, 3] = (50+0j)*((2.06909990386e-29+0j))
    H[18, 4] = (50+0j)*(0j)
    H[19, 3] = (50+0j)*(0j)
    H[19, 4] = (50+0j)*((2.61722736105e-29+0j))
    H[19, 5] = (50+0j)*(0j)
    H[20, 4] = (50+0j)*(0j)
    H[20, 5] = (50+0j)*((2.77598882236e-29+0j))
    H[20, 6] = (50+0j)*(0j)
    H[21, 5] = (50+0j)*(0j)
    H[21, 6] = (50+0j)*((2.61722736105e-29+0j))
    H[21, 7] = (50+0j)*(0j)
    H[22, 6] = (50+0j)*(0j)
    H[22, 7] = (50+0j)*((2.06909990386e-29+0j))
    H[23, 7] = (50+0j)*(0j)

    # We calculate the above-diagonal elements.
    for i in range(24):
        for j in range(i+1, 24):
            H[i, j] = H[j, i].conjugate()

    # We calculate the diagonal elements.
    delta1_3_1 = detuning_knob[0]
    delta1_4_1 = detuning_knob[0] + (-453782964.5)
    delta1_5_1 = detuning_knob[0] + (-1439867025.5)
    delta2_4_2 = detuning_knob[1]
    delta2_5_2 = detuning_knob[1] + (-986084061.0)
    delta2_6_2 = detuning_knob[1] + (-2661505482.0)

    H[3, 3] = -delta1_4_1+delta2_4_2
    H[4, 4] = -delta1_4_1+delta2_4_2
    H[5, 5] = -delta1_4_1+delta2_4_2
    H[6, 6] = -delta1_4_1+delta2_4_2
    H[7, 7] = -delta1_4_1+delta2_4_2
    H[8, 8] = -delta1_3_1
    H[9, 9] = -delta1_4_1
    H[10, 10] = -delta1_4_1
    H[11, 11] = -delta1_4_1
    H[12, 12] = -delta1_5_1
    H[13, 13] = -delta1_5_1
    H[14, 14] = -delta1_5_1
    H[15, 15] = -delta1_5_1
    H[16, 16] = -delta1_5_1
    H[17, 17] = -detuning_knob[0]
    H[18, 18] = -detuning_knob[0]
    H[19, 19] = -detuning_knob[0]
    H[20, 20] = -detuning_knob[0]
    H[21, 21] = -detuning_knob[0]
    H[22, 22] = -detuning_knob[0]
    H[23, 23] = -detuning_knob[0]

    for i in range(24):
        H[i, i] = H[i, i]*1.0545718e-34
    return H
